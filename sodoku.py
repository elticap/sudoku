#Generic Sudoku solver - Written by Barry Levett

#Enter grid here - enter grid with 1-9 for known squares and . for blanks.  Enter 81 continuous numbers row-by-row.
#Separate multiple grids with commas

#Some test grids:
#See http://www.kristanix.com/sudokuepic/worlds-hardest-sudoku.php
#See http://www.mirror.co.uk/news/weird-news/worlds-hardest-sudoku-can-you-242294
#See http://www.usatoday.com/news/offbeat/2006-11-06-sudoku_x.htm
#See http://en.wikipedia.org/wiki/Sudoku_algorithms#Exceptionally_difficult_Sudokus_.28hardest_Sudokus.29
#See http://mapleta.maths.uwa.edu.au/~gordon/sudokumin.php
#See https://github.com/attractivechaos/plb/blob/master/sudoku/sudoku.txt


############# EDIT FROM HERE ##################

hardesthuman = ["1....7.9..3..2...8..96..5....53..9...1..8...26....4...3......1..4......7..7...3..","..53.....8......2..7..1.5..4....53...1..7...6..32...8..6.5....9..4....3......97..","85...24..72......9..4.........1.7..23.5...9...4...........8..7..17..........36.4."]
hardestcomputer = ["..........5724...98....947...9..3...5..9..12...3.1.9...6....25....56.....7......6","..........72.6.1....51...82.8...13..4.........37.9..1.....238..5.4..9.........79.",".........9......84.623...5....6...453...1...6...9...7....1.....4.5..2....3.8....9","........3..1..56...9..4..7......9.5.7.......8.5.4.2....8..2..9...35..1..6........","........8..3...4...9..2..6.....79.......612...6.5.2.7...8...5...1.....2.4.5.....3",".......1.4.........2...........5.4.7..8...3....1.9....3..4..2...5.1........8.6...",".......12........3..23..4....18....5.6..7.8.......9.....85.....9...4.5..47...6...",".......12....35......6...7.7.....3.....4..8..1...........12.....8.....4..5....6..",".......39.....1..5..3.5.8....8.9...6.7...2...1..4.......9.8..5..2....6..4..7.....",".......4...2..4..1.7..5..9...3..7....4..6....6..1..8...2....1..85.9...6.....8...3",".......71.2.8........4.3...7...6..5....2..3..9........6...7.....8....4......5....","......8.17..2........5.6......7...5..1....3...8.......5......2..3..8....6...4....","......94.....9...53....5.7..8.4..1..463...........7.8.8..7.....7......28.5.26....",".....1.2.3...4.5.....6....7..2.....1.8..9..3.4.....8..5....2....9..3.4....67.....",".....2.......7...17..3...9.8..7......2.89.6...13..6....9..5.824.....891..........",".....7.95.....1...86..2.....2..73..85......6...3..49..3.5...41724................","....1.78.5....9..........4..2..........6....3.74.8.........3..2.8..4..1.6..5.....","....3..9....2....1.5.9..............1.2.8.4.6.8.5...2..75......4.1..6..3.....4.6.","....5...11......7..6.....8......4.....9.1.3.....596.2..8..62..7..7......3.5.7.2..","....6...4..6.3....1..4..5.77.....8.5...8.....6.8....9...2.9....4....32....97..1..","....7..8...6...5...2...3.61.1...7..2..8..534.2..9.......2......58...6.3.4...1....","....75....1..2.....4...3...5.....3.2...8...1.......6.....1..48.2........7........","....9..5..1.....3...23..7....45...7.8.....2.......64...9..1.....8..6......54....7","...36....85.......9.4..8........68.........17..9..45...1.5...6.4....9..2.....3...","...5...........5.697.....2...48.2...25.1...3..8..3.........4.7..13.5..9..2...31..","...5.1....9....8...6.......4.1..........7..9........3.8.....1.5...2..4.....36....","...5.3.......6.7..5.8....1636..2.......4.1.......3...567....2.8..4.7.......2..5..","...52.....9...3..4......7...1.....4..8..453..6...1...87.2........8....32.4..8..1.","...658.....4......12............96.7...3..5....2.8...3..19..8..3.6.....4....473..","...8....9.873...4.6..7.......85..97...........43..75.......3....3...145.4....2..1","..1.8.6.4.376.....5.............5.....6.1.8.....4.............3.....752.8.2.9.7..","..247..58..............1.4.....2...9528.9.4....9...1.........3.3....75..685..2...","..3......4...8..36..8...1...4..6..73...9..........2..5..4.7..686........7..6..5..","..3..6.8....1..2......7...4..9..8.6..3..4...1.7.2.....3....5.....5...6..98.....5.","..5...987.4..5...1..7......2...48....9.1.....6..2.....3..6..2.......9.7.......5..","..5..8..18......9.......78....4.....64....9......53..2.6.........138..5....9.714.","..7..8.....6.2.3...3......9.1..5..6.....1.....7.9....2........4.83..4...26....51.","..8.9.1...6.5...2......6....3.1.7.5.........9..4...3...5....2...7...3.8.2..7....4","..84...3....3.....9....157479...8........7..514.....2...9.6...2.5....4......9..56","..9.....3.....9...7.....5.6..65..4.....3......28......3..75.6..6...........12.3.8","..9...4...7.3...2.8...6...71..8....6....1..7.....56...3....5..1.4.....9...2...7..",".2..........6....3.74.8.........3..2.8..4..1.6..5.........1.78.5....9..........4.",".2.......3.5.62..9.68...3...5..........64.8.2..47..9....3.....1.....6...17.43....",".2......6....41.....78....1......7....37.....6..412....1..74..5..8.5..7......39..",".2....5938..5..46.94..6...8..2.3.....6..8.73.7..2.........4.38..7....6..........5",".2..5.7..4..1....68....3...2....8..3.4..2.5.....6...1...2.9.....9......57.4...9..",".2.3.......6..8.9.83.5........2...8.7.9..5........6..4.......1...1...4.22..7..8.9",".2.3......63.....58.......15....9.3....7........1....8.879..26......6.7...6..7..4",".237....68...6.59.9.....7......4.97.3.7.96..2.........5..47.........2....8.......",".26.39......6....19.....7.......4..9.5....2....85.....3..2..9..4....762.........4",".32.....58..3.....9.428...1...4...39...6...5.....1.....2...67.8.....4....95....6.",".4..5..67...1...4....2.....1..8..3........2...6...........4..5.3.....8..2........",".4.5.....8...9..3..76.2.....146..........9..7.....36....1..4.5..6......3..71..2..",".47.2....8....1....3....9.2.....5...6..81..5.....4.....7....3.4...9...1.4..27.8..",".47.8...1............6..7..6....357......5....1..6....28..4.....9.1...4.....2.69.",".476...5.8.3.....2.....9......8.5..6...1.....6.24......78...51...6....4..9...4..7",".5..9....1.....6.....3.8.....8.4...9514.......3....2..........4.8...6..77..15..6.",".5.3.7.4.1.........3.......5.8.3.61....8..5.9.6..1........4...6...6927....2...9..",".52..68.......7.2.......6....48..9..2..41......1.....8..61..38.....9...63..6..1.9",".524.........7.1..............8.2...3.....6...9.5.....1.6.3...........897........",".6.5.1.9.1...9..539....7....4.8...7.......5.8.817.5.3.....5.2............76..8...",".8...4.5....7..3............1..85...6.....2......4....3.26............417........",".8..4....3......1........2...5...4.69..1..8..2...........3.9....6....5.....2.....",".834.........7..5...........4.1.8..........27...3.....2.6.5....5.....8........1..",".923.........8.1...........1.7.4...........658.........6.5.2...4.....7.....9.....",".98.1....2......6.............3.2.5..84.........6.........4.8.93..5...........1..","1.......2.9.4...5...6...7...5.9.3.......7.......85..4.7.....6...3...9.8...2.....1","1.......3.6.3..7...7...5..121.7...9...7........8.1..2....8.64....9.2..6....4.....","1.......9..67...2..8....4......75.3...5..2....6.3......9....8..6...4...1..25...6.","1.....3.8.6.4..............2.3.1...........758.........7.5...6.....8.2...4.......","1.....7.9.4...72..8.........7..1..6.3.......5.6..4..2.........8..53...7.7.2....46","1.....9...64..1.7..7..4.......3.....3.89..5....7....2.....6.7.9.....4.1....129.3.","1....6.8..64..........4...7....9.6...7.4..5..5...7.1...5....32.3....8...4........","1....786...7..8.1.8..2....9........24...1......9..5...6.8..........5.9.......93.4","12.3.....4.....3....3.5......42..5......8...9.6...5.7...15..2......9..6......7..8","12.3....435....1....4........54..2..6...7.........8.9...31..5.......9.7.....6...8","15.3......7..4.2....4.72.....8.........9..1.8.1..8.79......38...........6....7423","2....1.9..1..3.7..9..8...2.......85..6.4.........7...3.2.3...6....5.....1.9...2.5","2.3.8....8..7...........1...6.5.7...4......3....1............82.5....6...1.......","249.6...3.3....2..8.......5.....6......2......1..4.82..9.5..7....4.....1.7...3...","3.6.7...........518.........1.4.5...7.....6.....2......2.....4.....8.3.....5.....","3.7.4...........918........4.....7.....16.......25..........38..9....5...2.6.....","38.6.......9.......2..3.51......5....3..1..6....4......17.5..8.......9.......7.32","4.....3.....8.2......7........1...8734.......6........5...6........1.4...82......","4.....5.8.3..........7......2.....6.....5.8......1.......6.3.7.5..2.....1.8......","4...3.......6..8..........1....5..9..8....6...7.2........1.27..5.3....4.9........","4...7.1....19.46.5.....1......7....2..2.3....847..6....14...8.6.2....3..6...9....","45.....3....8.1....9...........5..9.2..7.....8.........1..4..........7.2...6..8..","53..2.9...24.3..5...9..........1.827...7.........981.............64....91.2.5.43.","6.....7.3.4.8.................5.4.8.7..2.....1.3.......2.....5.....7.9......1....","6..3.2....5.....1..........7.26............543.........8.15........4.2........7..","6.2.5.........4.3..........43...8....1....2........7..5..27...........81...6.....","7......1946.19.......6827.4.9......7...3..4.5..67.......1......2...74......2..3..3.","7.8...3.....2.1...5.........4.....263...8.......1...9..9.6....4....7.5...........","8..7....4.5....6............3.97...8....43..5....2.9....6......2...6...7.71..83.2","9..1.4..2.8..6..7..........4.......1.7.....3.3.......7..........3..7..8.1..2.9..4","9.4..5...25.6..1..31......8.7...9...4..26......147....7.......2...3..8.6.4.....9.","963......1....8......2.5....4.8......1....7......3..257......3...9.2.4.7......9..","..............3.85..1.2.......5.7.....4...1...9.......5......73..2.1........4...9"]
mygrids = ["1....7.9..3..2...8..96..5....53..9...1..8...26....4...3......1..4......7..7...3.."]

grids = mygrids       #change this to change the test set
printinterim = True        #True = print interim steps;  False = don't print interim steps
printlogic = True         #True = print cell alternatives (not pretty);  False = don't print interim steps


############# TO HERE ##################

rows = [[0, 1, 2, 3, 4, 5, 6, 7, 8], [9, 10, 11, 12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23, 24, 25, 26], [27, 28, 29, 30, 31, 32, 33, 34, 35], [36, 37, 38, 39, 40, 41, 42, 43, 44], [45, 46, 47, 48, 49, 50, 51, 52, 53], [54, 55, 56, 57, 58, 59, 60, 61, 62], [63, 64, 65, 66, 67, 68, 69, 70, 71], [72, 73, 74, 75, 76, 77, 78, 79, 80]]
cols = [[0, 9, 18, 27, 36, 45, 54, 63, 72], [1, 10, 19, 28, 37, 46, 55, 64, 73], [2, 11, 20, 29, 38, 47, 56, 65, 74], [3, 12, 21, 30, 39, 48, 57, 66, 75], [4, 13, 22, 31, 40, 49, 58, 67, 76], [5, 14, 23, 32, 41, 50, 59, 68, 77], [6, 15, 24, 33, 42, 51, 60, 69, 78], [7, 16, 25, 34, 43, 52, 61, 70, 79], [8, 17, 26, 35, 44, 53, 62, 71, 80]]
blocks = [[0, 1, 2, 9, 10, 11, 18, 19, 20], [3, 4, 5, 12, 13, 14, 21, 22, 23], [6, 7, 8, 15, 16, 17, 24, 25, 26], [27, 28, 29, 36, 37, 38, 45, 46, 47], [30, 31, 32, 39, 40, 41, 48, 49, 50], [33, 34, 35, 42, 43, 44, 51, 52, 53], [54, 55, 56, 63, 64, 65, 72, 73, 74], [57, 58, 59, 66, 67, 68, 75, 76, 77], [60, 61, 62, 69, 70, 71, 78, 79, 80]]
digits = ["1","2","3","4","5","6","7","8","9"]

from time import time

def printpuzzle(matrix):
    curridx = 0
    for row in range(9):
        if row == 3 or row == 6:
            print " -------+-------+-------"
        output = "  "
        for col in range(1,10):
            if len(matrix[curridx]) >= 2:
                output += ". "
            else:
                output += matrix[curridx] + " "
            if col == 3 or col == 6:
                output += "| "
            curridx += 1
        if printlogic:
            output += "     " + "|".join(matrix[curridx-9:curridx])
        print output


def printpuzzle2(matrix):  #alternative grid layout
    curridx = 0
    for row in range(9):
        if row%3 == 0:
            print "|" + ("|==="*3 + "|")*3 + "|"
        else:
            print "|" + ("|---"*3 + "|")*3 + "|"
        output = "|"
        for col in range(1,10):
            if len(matrix[curridx]) >= 2:
                output += "| . "
            else:
                output += "| " + matrix[curridx] + " "
            if col%3 == 0:
                output += "|"
            curridx += 1
        output += "|"
        print output   #, " ", "|".join(matrix[curridx-9:curridx])
    print "|" + ("|==="*3 + "|")*3 + "|"


def isvalid(matrix):                          #tests for empty cells
    iscomplete = True
    for cell in matrix:
        if cell == "":
            return False, False
        elif iscomplete and len(cell) >= 2:   #check on iscomplete is for speed
            iscomplete = False

    for row in range(9):
        teststr = ""
        for cell in rows[row]:
            if len(matrix[cell]) == 1:
                teststr += matrix[cell]
        for digit in digits:
            if teststr.count(digit) >= 2:
                return False, iscomplete

    for col in range(9):
        teststr = ""
        for cell in cols[col]:
            if len(matrix[cell]) == 1:
                teststr += matrix[cell]
        for digit in digits:
            if teststr.count(digit) >= 2:
                return False, iscomplete

    for block in range(9):
        teststr = ""
        for cell in blocks[block]:
            if len(matrix[cell]) == 1:
                teststr += matrix[cell]
        for digit in digits:
            if teststr.count(digit) >= 2:
                return False, iscomplete


    return True, iscomplete



def sweep(matrix):
    checkstack = set()                 #list of solved cells
    for curridx in range(81):
        if len(matrix[curridx]) == 1:
            checkstack.add(curridx)

    while len(checkstack) > 0:
        while len(checkstack) > 0:
            cellidx = checkstack.pop()

            rowno = cellidx // 9
            colno = cellidx % 9
            block = rowno // 3 * 3 + colno // 3
            digit = matrix[cellidx]

            cellset = set.union(set(cols[colno]),set(rows[rowno]),set(blocks[block]))

            for curridx in cellset:
                if len(matrix[curridx]) >= 2:
                    matrix[curridx] = matrix[curridx].replace(digit,"")
                    if len(matrix[curridx]) == 1:
                        checkstack.add(curridx)

        keepgoing = True
        row = 0
        while keepgoing and row <= 8:
            teststr = ""
            for cell in rows[row]:
                if len(matrix[cell]) >= 2:
                    teststr += matrix[cell]
            digit = 1
            while keepgoing and digit <= 9:
                digitstr = str(digit)
                if teststr.count(digitstr) == 1:
                    ctr = 0
                    while keepgoing and ctr <= 8:
                        cell = rows[row][ctr]
                        if matrix[cell].count(digitstr) >= 1:
                            matrix[cell] = digitstr
                            checkstack.add(cell)
                            keepgoing = False
                        ctr += 1
                digit += 1
            row += 1

        col = 0
        while keepgoing and col <= 8:
            teststr = ""
            for cell in cols[col]:
                if len(matrix[cell]) >= 2:
                    teststr += matrix[cell]
            digit = 1
            while keepgoing and digit <= 9:
                digitstr = str(digit)
                if teststr.count(digitstr) == 1:
                    ctr = 0
                    while keepgoing and ctr <= 8:
                        cell = cols[col][ctr]
                        if matrix[cell].count(digitstr) >= 1:
                            matrix[cell] = digitstr
                            checkstack.add(cell)
                            keepgoing = False
                        ctr += 1
                digit += 1
            col += 1

        block = 0
        while keepgoing and block <= 8:
            teststr = ""
            for cell in blocks[block]:
                if len(matrix[cell]) >= 2:
                    teststr += matrix[cell]
            digit = 1
            while keepgoing and digit <= 9:
                digitstr = str(digit)
                if teststr.count(digitstr) == 1:
                    ctr = 0
                    while keepgoing and ctr <= 8:
                        cell = blocks[block][ctr]
                        if matrix[cell].count(digitstr) >= 1:
                            matrix[cell] = digitstr
                            checkstack.add(cell)
                            keepgoing = False
                        ctr += 1
                digit += 1
            block += 1


    return matrix


def bruteforce(matrix,recnum):
    global maxlevel
    global iterations
    iterations += 1

    matrix = sweep(matrix[:])
    valid, done = isvalid(matrix[:])
    if not valid:
        return matrix, False
    elif done:
        return matrix, True

    lngth = 2
    ctr = 0
    while len(matrix[ctr]) != lngth:   #find shortest brute force to check
        ctr += 1
        if ctr > 80:
            lngth += 1
            ctr = 0

    ctr2 = 0
    while not done and ctr2 < lngth:
        tmpmatrix = matrix[:]
        tmpmatrix[ctr] = matrix[ctr][ctr2]

        if printinterim:
            print "Puzzle " + str(puzznum) + ". Guess level " + str(recnum) + " (cell R" + str(ctr//9 + 1) + "-C" + str(ctr%9 + 1) + " set to " + tmpmatrix[ctr] + ")"
            printpuzzle(tmpmatrix[:])
            print

        if recnum > maxlevel:
            maxlevel = recnum

        tmpmatrix, done = bruteforce(tmpmatrix[:],recnum + 1)
        if done:
            return tmpmatrix[:], True
        else:
            ctr2 += 1

    return matrix[:], False


puzznum = 0
totaltime = time()

for grid in grids:

    starttime = time()
    gmatrix = list()
    puzznum += 1
    maxlevel = 0
    iterations = 0

    for char in grid:           #setting up the matrix mask
        if char in digits:
            gmatrix.append(char)
        else:
            gmatrix.append("123456789")

    if len(gmatrix) != 81:
        print "Input is not the correct length (expecting 81 characters)"
    else:
        print "START (puzzle number " + str(puzznum) + ")"
        printpuzzle(gmatrix)
        print

        gmatrix = sweep(gmatrix[:])
        valid, done = isvalid(gmatrix[:])

        gmatrix, done = bruteforce(gmatrix[:],1)
        print
        if not done:
            print "No Solution to this problem"
        else:
            print "SOLUTION (puzzle number " + str(puzznum) + ")"
            printpuzzle(gmatrix[:])
            print time() - starttime, "seconds"
            print "Maximum guess level:", maxlevel
            print "Guess iterations:", iterations
        print
        print


print "Total time for all " + str(puzznum) + " puzzles:", time() - totaltime
